/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grade12pat;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author yaseen
 */
public class MedicalHistoryPanel extends javax.swing.JPanel {

    Session session;
    RcdPatient patient;
    RcdAppointments appointment;
    List<RcdPatientFileAttachments> fileAttachements;

    /**
     * Creates new form MedicalHistoryPanel
     */
    public MedicalHistoryPanel(Session session, RcdPatient patient, RcdAppointments appointment) {
        initComponents();
        this.session = session;
        tblAllergies.setModel(new AllergyTableModel(session, patient));
        tblNotes.setModel(new NotesTableModel(session, patient));
        tblReadings.setModel(new ReadingTableModel(session, patient));
        this.appointment = appointment;
        this.patient = patient;
        fillInformation();
    }

    private void fillInformation() {
        fileAttachements = session.sqlQuery("SELECT * FROM PatientFileAttachments WHERE patientId = " + patient.getId(), RcdPatientFileAttachments.class);
        Vector stuff = new Vector();
        for (RcdPatientFileAttachments pfa : fileAttachements) {
            stuff.add(pfa.getFilename());
        }
        lstFileAttachements.setListData(stuff);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllergies = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNotes = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstFileAttachements = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblReadings = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setLayout(new java.awt.GridLayout(2, 2, 12, 12));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblAllergies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Allergies"
            }
        ));
        jScrollPane1.setViewportView(tblAllergies);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );

        add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblNotes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Time", "Note"
            }
        ));
        jScrollPane2.setViewportView(tblNotes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lstFileAttachements.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstFileAttachements.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstFileAttachementsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lstFileAttachements);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(0, 206, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 99, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblReadings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Type", "Time", "Reading"
            }
        ));
        jScrollPane4.setViewportView(tblReadings);

        jButton3.setText("View Graph");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Bill Patient");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton3)
                .addComponent(jButton4))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        session.showBillPatient(appointment);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        List<String> readings = session.sqlQuery("SELECT readingType from PatientReadings WHERE patientId = " + this.patient.getId() + " GROUP BY readingType");
        int result = JOptionPane.showOptionDialog(null, "Please choose something to graph",
                "Graph", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null,
                readings.toArray(), null);
        session.showGraph(new ArrayList(this.patient.getRcdPatientReadingsList()), readings.get(result));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        int result = fc.showDialog(this, "Import");
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            RcdPatientFileAttachments fileAttachement = new RcdPatientFileAttachments();
            char[] fileData = new char[(int) file.length()];
            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                br.read(fileData);
                fileAttachement.setFilename(file.getName());
                fileAttachement.setPatientid(patient);
                fileAttachement.setFilecontents(fileData);
                br.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MedicalHistoryPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MedicalHistoryPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            session.getEntityManager().getTransaction().begin();
            fileAttachement.setId(session.nextId("PatientFileAttachments"));
            session.getEntityManager().persist(fileAttachement);
            session.commit();
            fillInformation();

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void lstFileAttachementsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFileAttachementsMouseClicked
        RcdPatientFileAttachments attach = fileAttachements.get(lstFileAttachements.getSelectedIndex());
        if (evt.getClickCount() >= 2) {
            String fileName = attach.getFilename();
            String[] splitFileName = fileName.split("\\.");
            System.out.println(fileName);
            System.out.println(splitFileName[0]);
            System.out.println(splitFileName[1]);
            try {
                File tmp = File.createTempFile(splitFileName[0], splitFileName[splitFileName.length - 1]);
                BufferedWriter bw = new BufferedWriter(new FileWriter(tmp));
                bw.write((char[]) attach.getFilecontents());
                bw.close();
                Desktop desktop = Desktop.getDesktop();
                desktop.open(tmp);
            } catch (IOException ex) {
                Logger.getLogger(MedicalHistoryPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lstFileAttachementsMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        RcdPatientFileAttachments attach = fileAttachements.get(lstFileAttachements.getSelectedIndex());
        session.getEntityManager().getTransaction().begin();
        session.getEntityManager().remove(attach);
        session.commit();
        fillInformation();

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> lstFileAttachements;
    private javax.swing.JTable tblAllergies;
    private javax.swing.JTable tblNotes;
    private javax.swing.JTable tblReadings;
    // End of variables declaration//GEN-END:variables
}

abstract class BetterTableModel implements TableModel {

    RcdPatient patient;
    List content;
    Session session;
    List<TableModelListener> listeners;
    String[] headings;
    String type;

    BetterTableModel(Session session, RcdPatient patient, String[] headings, String type) {
        this.patient = patient;
        this.session = session;
        listeners = new ArrayList<TableModelListener>();
        this.headings = headings;
        this.type = type;
    }

    @Override
    public int getRowCount() {
        return content.size() + 1;
    }

    @Override
    public int getColumnCount() {
        return headings.length;
    }

    @Override
    public String getColumnName(int columnIndex) {
        return headings[columnIndex];
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return String.class;
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        if (rowIndex < content.size()) {
            return getRegularValueAt(rowIndex, columnIndex);
        } else if (columnIndex < getColumnCount() - 1) {
            return "";
        } else {
            return "Add new " + type;
        }
    }

    abstract public Object getRegularValueAt(int r, int c);

    @Override
    public void addTableModelListener(TableModelListener l) {
        listeners.add(l);
    }

    @Override
    public void removeTableModelListener(TableModelListener l) {
        listeners.remove(l);
    }

    void notifyListeners() {
        for (TableModelListener l : listeners) {
            l.tableChanged(new TableModelEvent(this));
        }
    }
}

class AllergyTableModel extends BetterTableModel {

    static String[] headings = {"Allergies"};

    public AllergyTableModel(Session session, RcdPatient patient) {
        super(session, patient, headings, "Allergy");
        content = session.sqlQuery("SELECT * FROM allergies WHERE patientId = " + patient.getId(), RcdAllergies.class);
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        RcdAllergies allergy;
        if (rowIndex < content.size()) {
            allergy = (RcdAllergies) content.get(rowIndex);
        } else {
            allergy = new RcdAllergies(session.nextId("Allergies"));
            allergy.setPatientid(patient);
            content.add(allergy);
        }
        allergy.setAllergytype((String) aValue);
        session.getEntityManager().getTransaction().begin();
        session.getEntityManager().persist(allergy);
        session.commit();
        notifyListeners();
    }

    @Override
    public Object getRegularValueAt(int r, int c) {
        return ((RcdAllergies) content.get(r)).getAllergytype();
    }
}

class NotesTableModel extends BetterTableModel {

    static String[] headings = {"Time", "Notes"};

    public NotesTableModel(Session session, RcdPatient patient) {
        super(session, patient, headings, "Note");
        content = session.sqlQuery("SELECT * FROM PatientNotes WHERE patientId = " + patient.getId(), RcdPatientNotes.class);
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        RcdPatientNotes note;
        if (rowIndex < content.size()) {
            note = (RcdPatientNotes) content.get(rowIndex);
        } else {
            note = new RcdPatientNotes(session.nextId("Allergies"));
            note.setPatientid(patient);
            note.setTime(new Date());
            note.setNotes("");
            content.add(note);
        }
        if (columnIndex == 1) {
            note.setNotes((String) aValue);
        }
        session.getEntityManager().getTransaction().begin();
        session.getEntityManager().persist(note);
        session.commit();
        notifyListeners();
    }

    @Override
    public boolean isCellEditable(int r, int c) {
        return c > 0;
    }

    @Override
    public Object getRegularValueAt(int r, int c) {
        RcdPatientNotes note = ((RcdPatientNotes) content.get(r));
        if (c == 0) {
            return note.getTime();
        } else {
            return note.getNotes();
        }
    }
}

class ReadingTableModel extends BetterTableModel {

    static String[] headings = {"Time", "Type", "Reading"};

    public ReadingTableModel(Session session, RcdPatient patient) {
        super(session, patient, headings, "Reading");
        this.content = session.sqlQuery("SELECT * FROM PatientReadings WHERE patientId = " + patient.getId(), RcdPatientReadings.class);
    }

    @Override
    public Object getRegularValueAt(int r, int c) {
        RcdPatientReadings reading = ((RcdPatientReadings) content.get(r));
        if (c == 0) {
            return reading.getTime();
        } else if (c == 1) {
            return reading.getReadingtype();
        } else {
            return reading.getReading();
        }
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        RcdPatientReadings readings;
        if (rowIndex < content.size()) {
            readings = (RcdPatientReadings) content.get(rowIndex);
        } else {
            readings = new RcdPatientReadings(session.nextId("PatientReadings"));
            readings.setPatientid(patient);
            readings.setTime(new Date());
            readings.setReading(0);
            readings.setReadingtype("");
            content.add(readings);
        }

        if (columnIndex == 1) {
            readings.setReadingtype((String) aValue);
        } else {
            try {
                readings.setReading(Double.parseDouble((String) aValue));
            } catch (NumberFormatException e) {
            };
        }
        session.getEntityManager().getTransaction().begin();
        session.getEntityManager().persist(readings);
        session.commit();
        notifyListeners();
    }
}
