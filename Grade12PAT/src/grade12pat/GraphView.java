/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grade12pat;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author yaseen
 */
public class GraphView extends javax.swing.JFrame {
    List<RcdPatientReadings> readings;
    /**
     * Creates new form GraphView
     */
    public GraphView(List<RcdPatientReadings> readings) {
        initComponents();
        this.readings = readings;
    }
    
    class GraphPanel extends JPanel {
        int padding = 10;
        int pointRadius = 5;
        
        @Override
        protected void paintComponent(Graphics g) {
            int height = this.getHeight();
            int width = this.getWidth();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, width, height);
            g.setColor(Color.BLACK);
            g.drawRect(padding, padding, width -2 * padding, height - 2 * padding);
            List<Point> coords = computeCoordinates(width - 4 * padding, height - 4 * padding);
            Point last = null;
            for (int i = 0; i < coords.size(); ++i) {
                Point c = coords.get(i);
                int cx = (int) c.getX() + 2 * padding;
                int cy = height - (int) c.getY() - 2 * padding;
                g.fillOval(cx - pointRadius, cy - pointRadius,  2 * pointRadius,  2 * pointRadius);
                if (last != null) {
                    int lx = (int) last.getX() + 2 * padding;
                    int ly = height - (int) last.getY() - 2 * padding;
                    g.drawLine(lx, ly, cx, cy);
                }
                last = c;
            }
        }
        
        private List<Point> computeCoordinates(int width, int height) {
            ArrayList<RcdPatientReadings> readings = new ArrayList<RcdPatientReadings>(GraphView.this.readings);
            List<Point> coords = new ArrayList<Point>();
            int nr = readings.size();
            
            readings.sort(new Comparator<RcdPatientReadings>() {
                @Override
                public int compare(RcdPatientReadings a, RcdPatientReadings b) {
                    return a.getTime().compareTo(b.getTime());
                }
            });
            double first = readings.get(0).getTime().getTime();
            double last = readings.get(nr - 1).getTime().getTime();
            double diff = last - first;
            double minY = 0;
            double maxY = 0;
            
            for (int i = 0; i < nr; ++i) {
                double time = readings.get(i).getTime().getTime();
                coords.add(new Point((int)((time - first) / diff * width), 0));
                double reading = readings.get(i).getReading();
                minY = Math.min(reading, minY);
                maxY = Math.max(reading, maxY);
            }
            for (int i = 0; i < nr; ++i) {
                double reading = readings.get(i).getReading();
                coords.get(i).y = (int)((reading - minY) / (maxY - minY) * height);
            }                 
            return coords;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGraph = new GraphPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout pnlGraphLayout = new javax.swing.GroupLayout(pnlGraph);
        pnlGraph.setLayout(pnlGraphLayout);
        pnlGraphLayout.setHorizontalGroup(
            pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        pnlGraphLayout.setVerticalGroup(
            pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlGraph;
    // End of variables declaration//GEN-END:variables
}
